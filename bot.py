import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, filters
)
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
QUESTION = 0
questions = [
    {"id": "q1", "text": "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å—Ç—Ä–µ—Å—Å –∏–∑-–∑–∞ —É—á—ë–±—ã?", "options": ["–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ò–Ω–æ–≥–¥–∞", "–†–µ–¥–∫–æ", "–ù–∏–∫–æ–≥–¥–∞"]},
    {"id": "q2", "text": "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏?", "options": ["–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ", "–°–∫–æ—Ä–µ–µ —Å–ª–æ–∂–Ω–æ", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", "–°–∫–æ—Ä–µ–µ –ª–µ–≥–∫–æ", "–û—á–µ–Ω—å –ª–µ–≥–∫–æ"]},
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [
    ["üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"],
    ["üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "üìû –ü–æ–º–æ—â—å"]
]


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
async def begin_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers'] = []
    context.user_data['q_index'] = 0
    return await ask_question(update, context)


async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_index = context.user_data['q_index']
    if q_index >= len(questions):
        return await finish(update, context)

    question = questions[q_index]
    keyboard = [[opt] for opt in question["options"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(question["text"], reply_markup=markup)
    return QUESTION


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers'].append(update.message.text)
    context.user_data['q_index'] += 1
    return await ask_question(update, context)


async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answers = context.user_data['answers']
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!", reply_markup=reply_markup)
    await update.message.reply_text(f"–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã: {answers}")
    return ConversationHandler.END


# üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
async def resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º: https://example.com/stress\n"
        "‚Ä¢ –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: https://example.com/meditation\n"
        "‚Ä¢ –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è: https://example.com/procrastination"
    )


# üìû –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìû –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:\n\n"
        "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫—É—é —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        "‚Ä¢ –ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é: 8-***-***-**-**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ."
    )


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))
    return ConversationHandler.END


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç$"), begin_test)],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã$"), resources))
    app.add_handler(MessageHandler(filters.Regex("^üìû –ü–æ–º–æ—â—å$"), help_command))
    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()

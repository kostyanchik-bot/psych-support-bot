from dotenv import load_dotenv
load_dotenv()

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
from survey import survey_questions
from analysis import analyze_responses
from recommendations import get_recommendations

import os
import datetime
from collections import defaultdict
import random

# –®–∞–≥–∏ –æ–ø—Ä–æ—Å–∞
SECTION, QUESTION = range(2)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [
    ["üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"],
    ["üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "üìû –ü–æ–º–æ—â—å"],
    ["üéØ –≠–º–æ—Ü–∏–∏", "üß© –ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å"],
    ["üìã –ü—Ä–∏–≤—ã—á–∫–∏", "üìÖ –°–æ–≤–µ—Ç—ã"],
    ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
]

# –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_stats = defaultdict(lambda: {"tests": 0, "last_result": None})

# –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫
habits = ["üíß –í—ã–ø–∏–ª –≤–æ–¥—É", "üò¥ –õ–µ–≥ —Å–ø–∞—Ç—å –≤–æ–≤—Ä–µ–º—è", "üö∂ –ü—Ä–æ–≥—É–ª—è–ª—Å—è", "üçé –ü–æ–µ–ª –ø–æ–ª–µ–∑–Ω–æ–µ"]

# –°–æ–≤–µ—Ç—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
daily_tips = [
    "–°–¥–µ–ª–∞–π 5 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ ‚Äî —ç—Ç–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–Ω–∏–∑–∏—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å.",
    "–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –ª–µ—á—å —Å–ø–∞—Ç—å –Ω–∞ 30 –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ.",
    "–ü—Ä–æ–≥—É–ª–∫–∞ 15 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ —É–ª—É—á—à–∏—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
    "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å 3 —Ö–æ—Ä–æ—à–∏–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è."
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –≠—Ç–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=reply_markup
    )


async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        context.user_data['section_idx'] = 0
        context.user_data['question_idx'] = 0
        context.user_data['responses'] = {}
        return await ask_question(update, context)

    elif text == "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        await update.message.reply_text(
            "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º: https://example.com/stress\n"
            "‚Ä¢ –ú–µ–¥–∏—Ç–∞—Ü–∏–∏: https://example.com/meditation\n"
            "‚Ä¢ –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è: https://example.com/procrastination"
        )

    elif text == "üìû –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "üìû –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: 8-***-***-**-**\n"
            "‚úâ –í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—É–∑–∞.\n"
            "üí¨ –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å!"
        )

    elif text == "üéØ –≠–º–æ—Ü–∏–∏":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üòä", callback_data="happy"),
             InlineKeyboardButton("üòê", callback_data="neutral"),
             InlineKeyboardButton("üòü", callback_data="anxious")]
        ])
        await update.message.reply_text("–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)

    elif text == "üß© –ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å":
        tips = ["–ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞ –∏ —Å–æ—Å—á–∏—Ç–∞–π –¥–æ 10.", "–í—Å—Ç–∞–Ω—å, –ø–æ—Ç—è–Ω–∏—Å—å, —É–ª—ã–±–Ω–∏—Å—å.", "–°–¥–µ–ª–∞–π 10 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤.", "–ü–æ–ø—Ä–æ–±—É–π –≤—Å–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ —Å–µ–≥–æ–¥–Ω—è."]
        await update.message.reply_text("üßò –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: " + random.choice(tips))

    elif text == "üìã –ü—Ä–∏–≤—ã—á–∫–∏":
        markup = ReplyKeyboardMarkup([[h] for h in habits] + [["‚¨Ö –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text("–û—Ç–º–µ—Ç—å, —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–∏–ª:", reply_markup=markup)

    elif text == "üìÖ –°–æ–≤–µ—Ç—ã":
        await update.message.reply_text("üìÖ –°–æ–≤–µ—Ç –¥–Ω—è: " + random.choice(daily_tips))

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        user_id = update.effective_user.id
        stats = user_stats[user_id]
        msg = f"üìä –ö–æ–ª-–≤–æ —Ç–µ—Å—Ç–æ–≤: {stats['tests']}\n"
        if stats['last_result']:
            msg += f"üìà –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['last_result']['level']}"
        await update.message.reply_text(msg)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")

    return ConversationHandler.END


async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    section_idx = context.user_data['section_idx']
    question_idx = context.user_data['question_idx']
    section = survey_questions[section_idx]
    questions = section['questions']
    question = questions[question_idx]

    context.user_data['current_qid'] = question['id']
    context.user_data['current_multi'] = question.get("multi", False)

    keyboard = [[opt] for opt in question["options"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(f"{question['text']}", reply_markup=markup)
    return QUESTION


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    qid = context.user_data.get('current_qid')
    is_multi = context.user_data.get('current_multi', False)

    if is_multi:
        values = [a.strip() for a in answer.split(',') if a.strip()]
        context.user_data['responses'][qid] = values
    else:
        context.user_data['responses'][qid] = answer

    context.user_data['question_idx'] += 1
    section_idx = context.user_data['section_idx']
    question_idx = context.user_data['question_idx']

    if question_idx >= len(survey_questions[section_idx]['questions']):
        context.user_data['section_idx'] += 1
        context.user_data['question_idx'] = 0

    if context.user_data['section_idx'] >= len(survey_questions):
        return await finish(update, context)
    else:
        return await ask_question(update, context)


async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑...", reply_markup=ReplyKeyboardRemove())

    result = analyze_responses(context.user_data['responses'])
    recs = get_recommendations(result)

    user_id = update.effective_user.id
    user_stats[user_id]['tests'] += 1
    user_stats[user_id]['last_result'] = result

    await update.message.reply_text(f"üìä –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏: *{result['level']}*", parse_mode="Markdown")
    await update.message.reply_text("üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for r in recs:
        await update.message.reply_text(f"‚úÖ {r}")

    reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text("üîÅ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç:", reply_markup=reply_markup)

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))
    return ConversationHandler.END


async def emotion_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    emoji = query.data
    messages = {
        "happy": "üòä –ó–¥–æ—Ä–æ–≤–æ! –ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º —Å –¥—Ä—É–≥–æ–º!",
        "neutral": "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ. –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è?",
        "anxious": "üòü –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    }
    await query.edit_message_text(messages.get(emoji, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫!"))


def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)
        ],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(emotion_callback))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

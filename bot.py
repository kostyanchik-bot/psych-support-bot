from dotenv import load_dotenv
load_dotenv()

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, filters
)
import os
from survey import survey_questions
from analysis import analyze_responses
from recommendations import get_recommendations

# –®–∞–≥–∏ –æ–ø—Ä–æ—Å–∞
SECTION, QUESTION = range(2)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [
    ["üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"],
    ["üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "üìû –ü–æ–º–æ—â—å"],
    ["üö® –ú–Ω–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ"]
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –≠—Ç–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        context.user_data['section_idx'] = 0
        context.user_data['question_idx'] = 0
        context.user_data['responses'] = {}
        return await ask_question(update, context)

    elif text == "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        await update.message.reply_text(
            "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º: https://example.com/stress\n"
            "‚Ä¢ –ú–µ–¥–∏—Ç–∞—Ü–∏–∏: https://example.com/meditation\n"
            "‚Ä¢ –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è: https://example.com/procrastination",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )
        return ConversationHandler.END

    elif text == "üìû –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "üìû –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: *-***-***-**-**\n"
            "‚úâ –í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—É–∑–∞.\n"
            "üí¨ –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å!",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )
        return ConversationHandler.END

    elif text == "üö® –ú–Ω–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ":
        await update.message.reply_text(
            "üòü –ü–æ–Ω–∏–º–∞—é, —Å–µ–π—á–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—è–∂–µ–ª–æ.\n\n"
            "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ.\n"
            "–í–æ—Ç –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n\n"
            "üëâ –°–¥–µ–ª–∞–π 5 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ –∏ –≤—ã–¥–æ—Ö–æ–≤.\n"
            "üëâ –ù–∞–∑–æ–≤–∏ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—à—å –≤–æ–∫—Ä—É–≥.\n"
            "üëâ –ü–æ—Ç—Ä–æ–≥–∞–π 1 –≤–µ—â—å —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π –µ—ë —Ç–µ–∫—Å—Ç—É—Ä—É.\n\n"
            "–¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –ª—É—á—à–µ, —á–µ–º —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è. üíô",
            reply_markup=ReplyKeyboardMarkup([["üìû –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è", "üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        return ConversationHandler.END

    elif text == "üìû –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è":
        await update.message.reply_text(
            "üìû –í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∫—É–¥–∞ –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è:\n\n"
            "‚Ä¢ –û–±—â–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –ª–∏–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122\n"
            "‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞ –≤—É–∑–∞: +7 (000) 000-00-00\n"
            "‚Ä¢ –û–Ω–ª–∞–π–Ω-–ø–æ–º–æ—â—å: https://example.com/help\n\n"
            "–¢—ã –Ω–µ –æ–¥–∏–Ω. –ü–æ–º–æ—â—å –µ—Å—Ç—å. ‚ù§Ô∏è",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )
        return ConversationHandler.END

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))
        return ConversationHandler.END

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    section_idx = context.user_data['section_idx']
    question_idx = context.user_data['question_idx']
    section = survey_questions[section_idx]
    questions = section['questions']
    question = questions[question_idx]

    context.user_data['current_qid'] = question['id']
    context.user_data['current_multi'] = question.get("multi", False)

    keyboard = [[opt] for opt in question["options"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(f"{question['text']}", reply_markup=markup)
    return QUESTION

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    qid = context.user_data.get('current_qid')
    is_multi = context.user_data.get('current_multi', False)

    if is_multi:
        values = [a.strip() for a in answer.split(',') if a.strip()]
        context.user_data['responses'][qid] = values
    else:
        context.user_data['responses'][qid] = answer

    context.user_data['question_idx'] += 1
    section_idx = context.user_data['section_idx']
    question_idx = context.user_data['question_idx']

    if question_idx >= len(survey_questions[section_idx]['questions']):
        context.user_data['section_idx'] += 1
        context.user_data['question_idx'] = 0

    if context.user_data['section_idx'] >= len(survey_questions):
        return await finish(update, context)
    else:
        return await ask_question(update, context)

async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑...", reply_markup=ReplyKeyboardRemove())

    result = analyze_responses(context.user_data['responses'])
    recs = get_recommendations(result)

    await update.message.reply_text(f"üìä –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏: *{result['level']}*", parse_mode="Markdown")
    await update.message.reply_text("üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for r in recs:
        await update.message.reply_text(f"‚úÖ {r}")

    reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text("üîÅ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç:", reply_markup=reply_markup)

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))
    return ConversationHandler.END

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)
        ],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
